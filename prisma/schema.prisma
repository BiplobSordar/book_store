generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
  // referentialIntegrity = "prisma"

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(225)
  password  String   @db.VarChar(225)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @default(USER)
  profile   Profile?
}

model Profile {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(225)
  image     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(100)
  genre     String   @db.VarChar(100)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Publisher {
  id        String             @id @default(uuid())
  name      String             @unique @db.VarChar(200)
  email     String             @unique @db.VarChar(100)
  phone     String             @unique @db.VarChar(50)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  authors   Author_Publisher[]
}

model Author {
  id         String             @id @default(uuid())
  name       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  publishers Author_Publisher[]
}

model Author_Publisher {
  author      Author    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  publishers  Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId String
  createdAt   DateTime  @default(now())

  @@id([authorId, publisherId])
}
