generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
  // referentialIntegrity = "prisma"

  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique @db.VarChar(225)
  password  String   @db.VarChar(225)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  role      Role     @default(USER)
  profile   Profile?
}

model Profile {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(225)
  image     String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String             @id @default(uuid())
  title     String             @db.VarChar(100)
  genre     String             @db.VarChar(100)
  createdAt DateTime           @default(now()) @db.Timestamp(6)
  updatedAt DateTime           @default(now()) @db.Timestamp(6)
  books     Category_To_Book[]
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model Publisher {
  id        String             @id @default(uuid())
  name      String             @unique @db.VarChar(200)
  email     String             @unique @db.VarChar(100)
  phone     String             @unique @db.VarChar(50)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  authors   Author_Publisher[]
  books     Book[]
}

model Author {
  id         String             @id @default(uuid())
  name       String
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  publishers Author_Publisher[]
  books      Book_To_Author[]
}

model Author_Publisher {
  author      Author    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  publishers  Publisher @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId String
  createdAt   DateTime  @default(now())

  @@id([authorId, publisherId])
}

enum Status {
  Active
  Paused
  Inactive
}

model Campaign {
  id              String   @id @default(uuid())
  name            String   @db.VarChar(300)
  campaign_for    String?
  campaign_for_id String?
  start_date      DateTime
  end_date        DateTime
  discount        Int
  status          Status   @default(Inactive)
  createdAt       DateTime @default(now())
  banners         Banner[]
}

model Banner {
  id         String   @id @default(uuid())
  canpagin   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  campaignId String
  name       String   @db.VarChar(300)
  image_url  String   @db.VarChar(300)
  link_url   String   @db.VarChar(300)
  createdAt  DateTime
}

model Book {
  id               String             @id @default(uuid())
  title            String             @db.VarChar(300)
  cover            String?            @db.VarChar(200)
  publisher        Publisher          @relation(fields: [publisherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  publisherId      String
  categorys        Category_To_Book[]
  price            String
  publication_date String
  language         String
  isbn             String             @unique
  description      String?            @db.VarChar(1200)
  quantity         Quantity?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  authors Book_To_Author[]
}

model Book_To_Author {
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    String
  author    Author   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  createdAt DateTime @default(now())

  @@id([authorId, bookId])
}

model Category_To_Book {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  Book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId     String

  @@id([categoryId, bookId])
}

model Quantity {
  id        String   @id @default(uuid())
  stock     String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
